import wixData from "wix-data";
import { fetch } from 'wix-fetch';

const MILE_PER_KM = 0.621371;

// SE1 5LJ - Cherrie Stevens or Cornlius Tailors
// B42 1QL - Moy's Alterations
// SK3 0LX - Bespoke Tailoring 252

//  W3 9NJ B42 1QL
export async function filterTailorWithMiles(filterOpts = {}, postalId) {
    try {
        let query = wixData.query("News");

        if (filterOpts.clothingItems && filterOpts.clothingItems.length > 0) {
            query = query.hasSome("clothingItems", filterOpts.clothingItems);
        }

        if (filterOpts.materials && filterOpts.materials.length > 0) {
            query = query.hasSome("materials", filterOpts.materials);
        }

        if (filterOpts.jobType && filterOpts.jobType.length > 0) {
            query = query.hasSome("jobType", filterOpts.jobType);
        }

        if (filterOpts.typesOfServicesTags && filterOpts.typesOfServicesTags.length > 0) {
            query = query.hasSome("typesOfServicesTags", filterOpts.typesOfServicesTags);
        }

        if (postalId) {
            query = query.isNotEmpty("address")
        }

        let { items } = await query.limit(999).descending("reviews").descending("area").find();
        console.log("GETTING ITEMS", items)

        let lat1, lng1;
        if (postalId) {
            const { lat, lng, error, hasError } = await getLatLng(postalId);
            // console.log("LAT/LANG", lat,lng)
            if (!hasError) {
                lat1 = lat;
                lng1 = lng;

            }
        }

        items = items.map(itemData => {
            let isNearBy, kms, miles;

            if (postalId) {
                const { lat: lat2, lng: lng2 } = getTailorLatLng(itemData);
                const coords1 = { lat: lat1, lng: lng1 };
                const coords2 = { lat: lat2, lng: lng2 };
                // console.log("COORDINATES 1", coords1)
                // console.log("COORDINATES 2", coords2)

                if (lat2 !== null) {
                    isNearBy = isWithinRadius(coords1, coords2, 25000);
                    kms = calculateDistance(coords1, coords2);
                    miles = Number((kms * MILE_PER_KM).toFixed(2));
                    // console.log("MILES DATA", miles)
                }
            }

            return {
                ...itemData,
                hasCalcMiles: !!postalId,
                isNearBy,
                kms,
                miles
            }
        })

        // TODO: BUG: B42 1QL | SE1 5LJ
        if (postalId) {
            items = items.filter(e => { return typeof e.miles === "number" }).sort((a, b) => a.miles - b.miles)
        }

        let itemMapMiles = {};
        for (const { _id, miles } of items) {
            itemMapMiles[_id] = miles
        }

        return { items, itemMapMiles };
    } catch (e) {
        console.error(e);
        return { items: [], itemMapMiles: {}, hasError: true }
    }
}

function getTailorLatLng(itemData) {
    try {
        return { lat: itemData.address.location.latitude, lng: itemData.address.location.longitude }
    } catch (e) {
        console.error(`Tailor : ${itemData.title} does not have a valid lat`)
        return { lat: null, lng: null }
    }

}

export async function getLatLng(postalId) {
    let url = `https://maps.googleapis.com/maps/api/geocode/json?address=${postalId}&key=AIzaSyChMXTYsNnYwy63M9rMgrgtr8pnYOTkTU8&region=UK`;

    const res = await fetch(url);
    const json = await res.json();
    console.log("GOOGLE RESPONSE _", json)
    if (json.status !== "OK") return { error: "Failed", json, hasError: true }
    const { lat, lng } = json.results[0].geometry.location;

    return { lat, lng }
}

function isWithinRadius(loc1, loc2, radius) {
    const { lat: lat1, lng: lng1 } = loc1;
    const { lat: lat2, lng: lng2 } = loc2;
    // Convert latitude and longitude from degrees to radians
    const lat1Rad = toRadians(lat1);
    const lon1Rad = toRadians(lng1);
    const lat2Rad = toRadians(lat2);
    const lon2Rad = toRadians(lng2);

    // Calculate the distance using Haversine formula
    const dlat = lat2Rad - lat1Rad;
    const dlon = lon2Rad - lon1Rad;
    const a =
        Math.sin(dlat / 2) * Math.sin(dlat / 2) +
        Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dlon / 2) * Math.sin(dlon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    // Radius of the Earth in kilometers (you can adjust this value)
    const earthRadius = 6371;

    // Calculate the distance in kilometers
    const distance = earthRadius * c;

    // Check if the distance is within the specified radius
    return distance <= radius;
}

function calculateDistance(loc1, loc2) {
    const { lat: lat1, lng: lon1 } = loc1;
    const { lat: lat2, lng: lon2 } = loc2;

    // Convert latitude and longitude from degrees to radians
    const lat1Rad = toRadians(lat1);
    const lon1Rad = toRadians(lon1);
    const lat2Rad = toRadians(lat2);
    const lon2Rad = toRadians(lon2);

    // Calculate the distance using Haversine formula
    const dlat = lat2Rad - lat1Rad;
    const dlon = lon2Rad - lon1Rad;
    const a =
        Math.sin(dlat / 2) * Math.sin(dlat / 2) +
        Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dlon / 2) * Math.sin(dlon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    // Radius of the Earth in kilometers
    const earthRadius = 6371;

    // Calculate the distance in kilometers
    const distance = earthRadius * c;

    return distance;
}

function toRadians(degrees) {
    return degrees * (Math.PI / 180);
}

// var check = geolib.isPointWithinRadius({ latitude: itemData.address.location.latitude, longitude: itemData.address.location.longitude }, { latitude: res.results[0].geometry.location.lat, longitude: res.results[0].geometry.location.lng },
//     25000
// );
// var distance = getDistance({ latitude: itemData.address.location.latitude, longitude: itemData.address.location.longitude }, { latitude: res.results[0].geometry.location.lat, longitude: res.results[0].geometry.location.lng });